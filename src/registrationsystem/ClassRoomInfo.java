/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClassRoomInfo.java
 *
 * Created on Dec 12, 2016, 10:28:35 AM
 */

package registrationsystem;

import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.ComponentView;

/**
 *
 * @author Abu Neno
 */
public class ClassRoomInfo extends javax.swing.JFrame {

    /** Creates new form ClassRoomInfo */
    public ClassRoomInfo() {
        initComponents();
    }
    public ClassRoomInfo(String id) {
        this();
        this.id = id;
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DB.con= DB.connect("System");
        fillTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        roomTabel = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        roomTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Location", "Period", "Day", "SeatLeft", "Max Capacity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(roomTabel);
        roomTabel.getColumnModel().getColumn(0).setMinWidth(0);
        roomTabel.getColumnModel().getColumn(0).setMaxWidth(0);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Class Room Information");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(closeButton)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassRoomInfo().setVisible(true);
            }
        });
    }
     public int numberOfRegisteredStudents(String classCourseID)
    {
        int ID = Integer.parseInt(classCourseID);
        int numbnerOFstudents = 0;
        String query = "SELECT count(`ClassCourse`.`classCourseId`) from `Coursestaken` inner join `ClassCourse` on `ClassCourse`.`classCourseId` = `Coursestaken`.`classCourseId`where `Coursestaken`.`classCourseId` =" + ID;
        ResultSet resultSet =DB.executeQueryselect(query,DB.con);

        try{
             resultSet.next();
             numbnerOFstudents = Integer.parseInt(resultSet.getString("Expr1000"));
        }
        catch(Exception e)
        {
             System.out.println("numberOfRegisteredStudents "+ e.getMessage());
        }

        return numbnerOFstudents;
    }
    
     private void fillTable()
     {
        String query = "SELECT `ClassCourse`.`classCourseId` ,`ClassRoom`.`location` ,`ClassCourse`.`period`,`ClassCourse`.`day`,`ClassRoom`.`maxCapacity`from( `ClassCourse`left join  `ClassRoom` on `ClassRoom`.`classId`= `ClassCourse`.`classId`)inner join `instructorClassCourse` on `instructorClassCourse`.`classcourseId` = `ClassCourse`.`classCourseId`where `instructorClassCourse`.`instId` ="+Integer.parseInt(id);
        ResultSet resultSet =DB.executeQueryselect(query,DB.con);
        DefaultTableModel model = (DefaultTableModel)roomTabel.getModel();

        try
        {
            while(resultSet.next())
            {
                Object [] row = new Object[6];

                row[0] = resultSet.getString("classCourseId");
                row[1] = resultSet.getString("location");
                row[2] = resultSet.getString("period");
                row[3] = resultSet.getString("day");
                row[5] = resultSet.getString("maxCapacity");
                row[4] = Integer.parseInt(row[5]+"") - numberOfRegisteredStudents(row[0]+"");
                model.addRow(row);
            }
        }
        catch(Exception e)
        {
            System.out.println("cannt  fiil table"+e.getMessage());
        }

     }
     String id;
     private DB_Connection DB =new DB_Connection();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable roomTabel;
    // End of variables declaration//GEN-END:variables

}
